<!doctype html>
<html>
    <head>
        <link rel="stylesheet" href="/css/doc.css">
        <link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
        <h4> Hello, <%= username %> </h4>
        <h4> <%= doc_name %>  </h4>
        <h4> Doc ID:  <%= doc_id %>  </h4>
        <form action='http://localhost:8080/home'>
            <button type="submit">Return Home</button>
        </form>
        <div id="editor"></div>
        <form id="delete" doc_id='<%= doc_id %>' onsubmit="return false">
            <input type="submit" value="Delete Document">
        </form>
    </head>
    <body>
        <script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>
        <script type="text/javascript">
            const user_id = Math.random().toString(20).substr(2, 10);
            const doc_id = `<%= doc_id %>`;
            const username = `<%= username %>`;
            // Local version that get set when the document opens, will be used
            // for ACK messages
            var currentVersion;
            const quill = new Quill('#editor', {
                theme: 'snow',
            });
            var queue = [];
            function enqueue(item) {
                // There are other OPs in the queue waiting to be sent/ACKed,
                // update this OPs version number to the version of the last
                // item in the queue + 1, then enqueue
                if (queue.length > 0) {
                    console.log(`There are OPs here, updating version number ${item.version}->${item.version+1}`)
                    var last_item = queue.slice(-1);
                    console.log(last_item);
                    item = {version: last_item[0].version + 1, op: item.op}
                    console.log(`[v: ${item.version}] Enqueueing ${JSON.stringify(item.op)}`)
                    queue.push(item);
                    console.log(`Queue: ${JSON.stringify(queue)}`);
                }
                // Nothing in the queue right now, enqueue then send right away
                else {
                    console.log(`[v: ${item.version}] Enqueueing ${JSON.stringify(item.op)}`)
                    queue.push(item);
                    console.log(`Queue: ${JSON.stringify(queue)}`);
                    // Send the item but wait for ACK before dequeueing
                    console.log(`Sending ${JSON.stringify(item.op)} to server`);
                    send(queue[0]);
                }
            }
            function send(item) {
                var xhr = new XMLHttpRequest();
                xhr.open("POST", `http://localhost:8080/doc/op/${doc_id}/${user_id}`, false);
                xhr.setRequestHeader("Content-Type", "application/json");
                xhr.send(JSON.stringify({version: item.version, op: item.op}));
                // Process server response
                if (xhr.readyState == 4 && xhr.status == 200) {
                    var json = JSON.parse(xhr.responseText);
                    // Submission success
                    if (json['status'] == 'ok') {
                        console.log(`[Status: OK] OP submission success for ${JSON.stringify(item.op)}!`);
                    }
                    // Retry submission
                    else if (json['status'] == 'retry') {
                        console.log(`[Status: RETRY] Requeuing ${JSON.stringify(item.op)}...`);
                        var version = item.version;
                        var op = item.op;
                        console.log(`>>>RESENDING ${JSON.stringify(item.op)} `)
                        // Update version and resend
                        item = {version: item.version + 1, op: item.op}
                        send(item);
                    }
                }
            }
            // Listens for typing from user
            quill.on('text-change', function(delta, oldDelta, source) {
                if (source == 'user') {
                    console.log(`Local change:`);
                    console.log(delta.ops);
                    var op = delta.ops;
                    enqueue({version: currentVersion, op: op});
                }
            });
            quill.on('selection-change', function(range, oldRange, source) {
                // User selected text or clicked
                if (range) {
                    // Send to server
                    var xhr = new XMLHttpRequest();
                    xhr.open("POST", `http://localhost:8080/doc/presence/${doc_id}/${user_id}`, true);
                    xhr.setRequestHeader("Content-Type", "application/json");
                    xhr.send(JSON.stringify({index: range.index, length: range.length, name: username}));
                }
            });
            // Start Delta event stream with server
            const source = new EventSource(`http://localhost:8080/doc/connect/${doc_id}/${user_id}`);
            // Listens for notifications from server (document changes from others)
            source.addEventListener('message', message => {
                var obj = JSON.parse(event.data)
                // When first opening the document
                if (obj.content) {
                    console.log(`Setting initial data:`)
                    console.log(obj.content);
                    console.log(`Initial version:`)
                    console.log(obj.version);
                    currentVersion = obj.version;
                    quill.setContents(obj.content);
                }
                // ACK Message from text change
                else if (obj.ack) {
                    console.log(`ACK received for ${JSON.stringify(obj.ack)}!`);
                    currentVersion += 1;
                    console.log(`Dequeueing ${JSON.stringify(obj.ack)}`)
                    // ACK received, dequeue
                    queue.shift();
                    console.log(`Queue: ${JSON.stringify(queue)}`);
                    // Check if theres OPs waiting to be sent
                    if (queue.length > 0) {
                        send(queue[0])
                    }
                }
                // Presence update from another user
                else if (obj.presence) {
                    var user_id = obj.presence.id;
                    console.log(`[${user_id}] presence change:`);
                    // Person highlighted or clicked somewhere
                    if (obj.presence.cursor != null) {
                        var index = obj.presence.cursor.index;
                        var length = obj.presence.cursor.length;
                        var name = obj.presence.cursor.name;
                        if (length == 0) {
                            console.log(`[${name}] is at ${index}`);
                        }
                        else {
                            console.log(`[${name}] highlighted ${index}->${index+length}`);
                        }
                        quill.setSelection(index, length, 'silent');
                    }
                     // Person disconnected
                    else {
                        console.log(`[${user_id}] disconnected`)
                    }

                }
                // Change from other user
                else {
                    console.log(`Change from someone else:`)
                    currentVersion += 1;
                    console.log(obj);
                    quill.updateContents(obj);
                }
            });
        </script>
        <script type="module" src="/js/doc.js"></script>
    </body>
</html>
